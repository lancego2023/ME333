
out.elf:     file format elf32-tradlittlemips


Disassembly of section .config_BFC02FF0:

bfc02ff0 <__config_BFC02FF0>:
bfc02ff0:	ff ff fe fa                                         ....

Disassembly of section .config_BFC02FF4:

bfc02ff4 <__config_BFC02FF4>:
bfc02ff4:	d9 79 f8 ff                                         .y..

Disassembly of section .config_BFC02FF8:

bfc02ff8 <__config_BFC02FF8>:
bfc02ff8:	db ce 6c ff                                         ..l.

Disassembly of section .config_BFC02FFC:

bfc02ffc <__config_BFC02FFC>:
bfc02ffc:	ff ff ff 7e                                         ...~

Disassembly of section .reset:

bd001970 <_reset>:
bd001970:	0f40065e 	jal	bd001978 <_startup>
bd001974:	00000000 	nop

bd001978 <_startup>:
bd001978:	401a6000 	mfc0	k0,c0_status
bd00197c:	7f5a04c0 	ext	k0,k0,0x13,0x1
bd001980:	13400005 	beqz	k0,bd001998 <_no_nmi>
bd001984:	00000000 	nop
bd001988:	3c1a9d00 	lui	k0,0x9d00
bd00198c:	275a27a0 	addiu	k0,k0,10144
bd001990:	03400008 	jr	k0
bd001994:	00000000 	nop

bd001998 <_no_nmi>:
bd001998:	3c1da002 	lui	sp,0xa002
bd00199c:	27bdfff8 	addiu	sp,sp,-8
bd0019a0:	3c1ca000 	lui	gp,0xa000
bd0019a4:	279c7ff0 	addiu	gp,gp,32752
bd0019a8:	40096002 	mfc0	t1,c0_srsctl
bd0019ac:	01205820 	add	t3,t1,zero
bd0019b0:	7d2a1e80 	ext	t2,t1,0x1a,0x4
bd0019b4:	7d494984 	ins	t1,t2,0x6,0x4
bd0019b8:	40896002 	mtc0	t1,c0_srsctl
bd0019bc:	000000c0 	ehb
bd0019c0:	41dce000 	wrpgpr	gp,gp
bd0019c4:	408b6002 	mtc0	t3,c0_srsctl
bd0019c8:	000000c0 	ehb
bd0019cc:	3c089d00 	lui	t0,0x9d00
bd0019d0:	250827c8 	addiu	t0,t0,10184
bd0019d4:	0100f809 	jalr	t0
bd0019d8:	00000000 	nop

bd0019dc <_start_bss_init>:
bd0019dc:	3c08a000 	lui	t0,0xa000
bd0019e0:	25080000 	addiu	t0,t0,0
bd0019e4:	3c09a000 	lui	t1,0xa000
bd0019e8:	25290000 	addiu	t1,t1,0
bd0019ec:	10000003 	b	bd0019fc <_bss_check>
bd0019f0:	00000000 	nop

bd0019f4 <_bss_init>:
bd0019f4:	ad000000 	sw	zero,0(t0)
bd0019f8:	25080004 	addiu	t0,t0,4

bd0019fc <_bss_check>:
bd0019fc:	0109082b 	sltu	at,t0,t1
bd001a00:	1420fffc 	bnez	at,bd0019f4 <_bss_init>
bd001a04:	00000000 	nop
bd001a08:	3c089d00 	lui	t0,0x9d00
bd001a0c:	2508258c 	addiu	t0,t0,9612
bd001a10:	0100f809 	jalr	t0
bd001a14:	00000000 	nop
bd001a18:	3c090000 	lui	t1,0x0
bd001a1c:	25290000 	addiu	t1,t1,0
bd001a20:	11200010 	beqz	t1,bd001a64 <_ramfunc_done>
bd001a24:	00000000 	nop
bd001a28:	3c090002 	lui	t1,0x2
bd001a2c:	25290000 	addiu	t1,t1,0
bd001a30:	3c0abf88 	lui	t2,0xbf88
bd001a34:	254a2010 	addiu	t2,t2,8208
bd001a38:	ad490000 	sw	t1,0(t2)
bd001a3c:	3c090002 	lui	t1,0x2
bd001a40:	25290000 	addiu	t1,t1,0
bd001a44:	3c0abf88 	lui	t2,0xbf88
bd001a48:	254a2020 	addiu	t2,t2,8224
bd001a4c:	ad490000 	sw	t1,0(t2)
bd001a50:	3c090002 	lui	t1,0x2
bd001a54:	25290000 	addiu	t1,t1,0
bd001a58:	3c0abf88 	lui	t2,0xbf88
bd001a5c:	254a2030 	addiu	t2,t2,8240
bd001a60:	ad490000 	sw	t1,0(t2)

bd001a64 <_ramfunc_done>:
bd001a64:	40804800 	mtc0	zero,c0_count
bd001a68:	240affff 	li	t2,-1
bd001a6c:	408a5800 	mtc0	t2,c0_compare
bd001a70:	3c080040 	lui	t0,0x40
bd001a74:	400a6000 	mfc0	t2,c0_status
bd001a78:	010a5025 	or	t2,t0,t2
bd001a7c:	408a6000 	mtc0	t2,c0_status
bd001a80:	3c099d00 	lui	t1,0x9d00
bd001a84:	25290000 	addiu	t1,t1,0
bd001a88:	000000c0 	ehb
bd001a8c:	40897801 	mtc0	t1,c0_ebase
bd001a90:	3c090000 	lui	t1,0x0
bd001a94:	25290001 	addiu	t1,t1,1
bd001a98:	240a0000 	li	t2,0
bd001a9c:	7d2a4944 	ins	t2,t1,0x5,0x5
bd001aa0:	408a6001 	mtc0	t2,c0_intctl
bd001aa4:	3c090080 	lui	t1,0x80
bd001aa8:	40896800 	mtc0	t1,c0_cause
bd001aac:	40088000 	mfc0	t0,c0_config
bd001ab0:	7d090580 	ext	t1,t0,0x16,0x1
bd001ab4:	00094c40 	sll	t1,t1,0x11
bd001ab8:	40086000 	mfc0	t0,c0_status
bd001abc:	3c010058 	lui	at,0x58
bd001ac0:	01014024 	and	t0,t0,at
bd001ac4:	01284025 	or	t0,t1,t0
bd001ac8:	40886000 	mtc0	t0,c0_status
bd001acc:	000000c0 	ehb
bd001ad0:	3c089d00 	lui	t0,0x9d00
bd001ad4:	250827d0 	addiu	t0,t0,10192
bd001ad8:	0100f809 	jalr	t0
bd001adc:	00000000 	nop
bd001ae0:	40086000 	mfc0	t0,c0_status
bd001ae4:	3c01ffbf 	lui	at,0xffbf
bd001ae8:	3421ffff 	ori	at,at,0xffff
bd001aec:	01014024 	and	t0,t0,at
bd001af0:	40886000 	mtc0	t0,c0_status
bd001af4:	30840000 	andi	a0,a0,0x0
bd001af8:	30a50000 	andi	a1,a1,0x0
bd001afc:	3c089d00 	lui	t0,0x9d00
bd001b00:	25082618 	addiu	t0,t0,9752
bd001b04:	01000008 	jr	t0
bd001b08:	00000000 	nop

Disassembly of section .bev_excpt:

bd001cf0 <_bev_exception>:
bd001cf0:	3c1a9d00 	lui	k0,0x9d00
bd001cf4:	275a266c 	addiu	k0,k0,9836
bd001cf8:	03400008 	jr	k0
bd001cfc:	00000000 	nop

Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:	3c1a9d00 	lui	k0,0x9d00
9d000184:	275a2420 	addiu	k0,k0,9248
9d000188:	03400008 	jr	k0
9d00018c:	00000000 	nop

Disassembly of section .vector_0:

9d000200 <__vector_dispatch_0>:
9d000200:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000204:	00000000 	nop

Disassembly of section .vector_1:

9d000220 <__vector_dispatch_1>:
9d000220:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000224:	00000000 	nop

Disassembly of section .vector_2:

9d000240 <__vector_dispatch_2>:
9d000240:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000244:	00000000 	nop

Disassembly of section .vector_3:

9d000260 <__vector_dispatch_3>:
9d000260:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000264:	00000000 	nop

Disassembly of section .vector_4:

9d000280 <__vector_dispatch_4>:
9d000280:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000284:	00000000 	nop

Disassembly of section .vector_5:

9d0002a0 <__vector_dispatch_5>:
9d0002a0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0002a4:	00000000 	nop

Disassembly of section .vector_6:

9d0002c0 <__vector_dispatch_6>:
9d0002c0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0002c4:	00000000 	nop

Disassembly of section .vector_7:

9d0002e0 <__vector_dispatch_7>:
9d0002e0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0002e4:	00000000 	nop

Disassembly of section .vector_8:

9d000300 <__vector_dispatch_8>:
9d000300:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000304:	00000000 	nop

Disassembly of section .vector_9:

9d000320 <__vector_dispatch_9>:
9d000320:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000324:	00000000 	nop

Disassembly of section .vector_10:

9d000340 <__vector_dispatch_10>:
9d000340:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000344:	00000000 	nop

Disassembly of section .vector_11:

9d000360 <__vector_dispatch_11>:
9d000360:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000364:	00000000 	nop

Disassembly of section .vector_12:

9d000380 <__vector_dispatch_12>:
9d000380:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000384:	00000000 	nop

Disassembly of section .vector_13:

9d0003a0 <__vector_dispatch_13>:
9d0003a0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0003a4:	00000000 	nop

Disassembly of section .vector_14:

9d0003c0 <__vector_dispatch_14>:
9d0003c0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0003c4:	00000000 	nop

Disassembly of section .vector_15:

9d0003e0 <__vector_dispatch_15>:
9d0003e0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0003e4:	00000000 	nop

Disassembly of section .vector_16:

9d000400 <__vector_dispatch_16>:
9d000400:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000404:	00000000 	nop

Disassembly of section .vector_17:

9d000420 <__vector_dispatch_17>:
9d000420:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000424:	00000000 	nop

Disassembly of section .vector_18:

9d000440 <__vector_dispatch_18>:
9d000440:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000444:	00000000 	nop

Disassembly of section .vector_19:

9d000460 <__vector_dispatch_19>:
9d000460:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000464:	00000000 	nop

Disassembly of section .vector_20:

9d000480 <__vector_dispatch_20>:
9d000480:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000484:	00000000 	nop

Disassembly of section .vector_21:

9d0004a0 <__vector_dispatch_21>:
9d0004a0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0004a4:	00000000 	nop

Disassembly of section .vector_22:

9d0004c0 <__vector_dispatch_22>:
9d0004c0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0004c4:	00000000 	nop

Disassembly of section .vector_23:

9d0004e0 <__vector_dispatch_23>:
9d0004e0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0004e4:	00000000 	nop

Disassembly of section .vector_24:

9d000500 <__vector_dispatch_24>:
9d000500:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000504:	00000000 	nop

Disassembly of section .vector_25:

9d000520 <__vector_dispatch_25>:
9d000520:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000524:	00000000 	nop

Disassembly of section .vector_26:

9d000540 <__vector_dispatch_26>:
9d000540:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000544:	00000000 	nop

Disassembly of section .vector_27:

9d000560 <__vector_dispatch_27>:
9d000560:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000564:	00000000 	nop

Disassembly of section .vector_28:

9d000580 <__vector_dispatch_28>:
9d000580:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000584:	00000000 	nop

Disassembly of section .vector_29:

9d0005a0 <__vector_dispatch_29>:
9d0005a0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0005a4:	00000000 	nop

Disassembly of section .vector_30:

9d0005c0 <__vector_dispatch_30>:
9d0005c0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0005c4:	00000000 	nop

Disassembly of section .vector_31:

9d0005e0 <__vector_dispatch_31>:
9d0005e0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0005e4:	00000000 	nop

Disassembly of section .vector_32:

9d000600 <__vector_dispatch_32>:
9d000600:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000604:	00000000 	nop

Disassembly of section .vector_33:

9d000620 <__vector_dispatch_33>:
9d000620:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000624:	00000000 	nop

Disassembly of section .vector_34:

9d000640 <__vector_dispatch_34>:
9d000640:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000644:	00000000 	nop

Disassembly of section .vector_35:

9d000660 <__vector_dispatch_35>:
9d000660:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000664:	00000000 	nop

Disassembly of section .vector_36:

9d000680 <__vector_dispatch_36>:
9d000680:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000684:	00000000 	nop

Disassembly of section .vector_37:

9d0006a0 <__vector_dispatch_37>:
9d0006a0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0006a4:	00000000 	nop

Disassembly of section .vector_38:

9d0006c0 <__vector_dispatch_38>:
9d0006c0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0006c4:	00000000 	nop

Disassembly of section .vector_39:

9d0006e0 <__vector_dispatch_39>:
9d0006e0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0006e4:	00000000 	nop

Disassembly of section .vector_40:

9d000700 <__vector_dispatch_40>:
9d000700:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000704:	00000000 	nop

Disassembly of section .vector_41:

9d000720 <__vector_dispatch_41>:
9d000720:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000724:	00000000 	nop

Disassembly of section .vector_42:

9d000740 <__vector_dispatch_42>:
9d000740:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000744:	00000000 	nop

Disassembly of section .vector_43:

9d000760 <__vector_dispatch_43>:
9d000760:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000764:	00000000 	nop

Disassembly of section .vector_44:

9d000780 <__vector_dispatch_44>:
9d000780:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000784:	00000000 	nop

Disassembly of section .vector_45:

9d0007a0 <__vector_dispatch_45>:
9d0007a0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0007a4:	00000000 	nop

Disassembly of section .vector_46:

9d0007c0 <__vector_dispatch_46>:
9d0007c0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0007c4:	00000000 	nop

Disassembly of section .vector_47:

9d0007e0 <__vector_dispatch_47>:
9d0007e0:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d0007e4:	00000000 	nop

Disassembly of section .vector_48:

9d000800 <__vector_dispatch_48>:
9d000800:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000804:	00000000 	nop

Disassembly of section .vector_49:

9d000820 <__vector_dispatch_49>:
9d000820:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000824:	00000000 	nop

Disassembly of section .vector_50:

9d000840 <__vector_dispatch_50>:
9d000840:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000844:	00000000 	nop

Disassembly of section .vector_51:

9d000860 <__vector_dispatch_51>:
9d000860:	0b4009bf 	j	9d0026fc <_DefaultInterrupt>
9d000864:	00000000 	nop

Disassembly of section .rodata:

9d001e00 <.rodata>:
9d001e00:	75706e49 	jalx	95c1b924 <_bmxdudba_address+0x95bfb924>
9d001e04:	656d2074 	0x656d2074
9d001e08:	67617373 	0x67617373
9d001e0c:	6f6e2065 	0x6f6e2065
9d001e10:	0d203a77 	jal	9480e9dc <_bmxdudba_address+0x947ee9dc>
9d001e14:	0c00000a 	jal	90000028 <_bmxdudba_address+0x8ffe0028>
9d001e18:	61656c43 	0x61656c43
9d001e1c:	20646572 	addi	a0,v1,25970
9d001e20:	7074754f 	0x7074754f
9d001e24:	0d2e7475 	jal	94b9d1d4 <_bmxdudba_address+0x94b7d1d4>
9d001e28:	000d0d0a 	0xd0d0a

Disassembly of section ._debug_exception:

bfc00480 <__DbgExecReturn>:
bfc00480:	409bf800 	mtc0	k1,c0_desave
bfc00484:	000000c0 	ehb
bfc00488:	3c1b9d00 	lui	k1,0x9d00
bfc0048c:	277b2744 	addiu	k1,k1,10052
bfc00490:	13600002 	beqz	k1,bfc0049c <__DbgExecReturn+0x1c>
bfc00494:	00000000 	nop
bfc00498:	409bc000 	mtc0	k1,c0_depc
bfc0049c:	401bf800 	mfc0	k1,c0_desave
bfc004a0:	000000c0 	ehb
bfc004a4:	4200001f 	deret
bfc004a8:	00000000 	nop

Disassembly of section .text:

9d001e2c <LCD_Read>:
  PMDIN = data;        // send the data
}

// read data from the LCD.  
// rs : the value of the RS signal 0 for instructions status, 1 for data
unsigned char LCD_Read(int rs) {
9d001e2c:	27bdfff8 	addiu	sp,sp,-8
  volatile unsigned char val = 0; // volatile so 1st read doesn't get optimized away
9d001e30:	a3a00000 	sb	zero,0(sp)
  if(rs) { // 1 to read data
9d001e34:	10800017 	beqz	a0,9d001e94 <LCD_Read+0x68>
9d001e38:	3c02bf80 	lui	v0,0xbf80
    PMADDRSET = 1 << PMABIT;
9d001e3c:	3c02bf80 	lui	v0,0xbf80
9d001e40:	24030400 	li	v1,1024
9d001e44:	ac437028 	sw	v1,28712(v0)
  while(PMMODEbits.BUSY) { ; }
9d001e48:	3c03bf80 	lui	v1,0xbf80
9d001e4c:	8c627010 	lw	v0,28688(v1)
9d001e50:	7c4203c0 	ext	v0,v0,0xf,0x1
9d001e54:	1440fffd 	bnez	v0,9d001e4c <LCD_Read+0x20>
9d001e58:	3c02bf80 	lui	v0,0xbf80
  } else { // 0 to read command status
    PMADDRCLR = 1 << PMABIT;
  }
  // from the PIC32 reference manual, you must read twice to actually get the data
  waitPMP();                  // wait for the PMP to be ready
  val = PMDIN;
9d001e5c:	8c427040 	lw	v0,28736(v0)
9d001e60:	304200ff 	andi	v0,v0,0xff
9d001e64:	a3a20000 	sb	v0,0(sp)
  while(PMMODEbits.BUSY) { ; }
9d001e68:	3c03bf80 	lui	v1,0xbf80
9d001e6c:	8c627010 	lw	v0,28688(v1)
9d001e70:	7c4203c0 	ext	v0,v0,0xf,0x1
9d001e74:	1440fffd 	bnez	v0,9d001e6c <LCD_Read+0x40>
9d001e78:	3c02bf80 	lui	v0,0xbf80
  waitPMP();
  val = PMDIN;
9d001e7c:	8c427040 	lw	v0,28736(v0)
9d001e80:	304200ff 	andi	v0,v0,0xff
9d001e84:	a3a20000 	sb	v0,0(sp)
  return val;
9d001e88:	93a20000 	lbu	v0,0(sp)
}
9d001e8c:	03e00008 	jr	ra
9d001e90:	27bd0008 	addiu	sp,sp,8
    PMADDRCLR = 1 << PMABIT;
9d001e94:	24030400 	li	v1,1024
9d001e98:	ac437024 	sw	v1,28708(v0)
  while(PMMODEbits.BUSY) { ; }
9d001e9c:	1000ffeb 	b	9d001e4c <LCD_Read+0x20>
9d001ea0:	3c03bf80 	lui	v1,0xbf80

9d001ea4 <LCD_Write>:
void LCD_Write(int rs, unsigned char data) {
9d001ea4:	27bdffd8 	addiu	sp,sp,-40
9d001ea8:	afbf0024 	sw	ra,36(sp)
9d001eac:	afb10020 	sw	s1,32(sp)
9d001eb0:	afb0001c 	sw	s0,28(sp)
9d001eb4:	00808825 	move	s1,a0
9d001eb8:	00a08025 	move	s0,a1
  volatile unsigned char val = 0x80;
9d001ebc:	2402ff80 	li	v0,-128
9d001ec0:	a3a20010 	sb	v0,16(sp)
  while (val & 0x80) {
9d001ec4:	93a20010 	lbu	v0,16(sp)
9d001ec8:	7c021420 	seb	v0,v0
9d001ecc:	04410008 	bgez	v0,9d001ef0 <LCD_Write+0x4c>
9d001ed0:	24020032 	li	v0,50
    val = LCD_Read(0);
9d001ed4:	0f40078b 	jal	9d001e2c <LCD_Read>
9d001ed8:	00002025 	move	a0,zero
9d001edc:	a3a20010 	sb	v0,16(sp)
  while (val & 0x80) {
9d001ee0:	93a20010 	lbu	v0,16(sp)
9d001ee4:	7c021420 	seb	v0,v0
9d001ee8:	0440fffa 	bltz	v0,9d001ed4 <LCD_Write+0x30>
9d001eec:	24020032 	li	v0,50
    _nop();
9d001ef0:	00000040 	ssnop
9d001ef4:	2442ffff 	addiu	v0,v0,-1
  for(i = 0; i < 50; ++i) { // slight delay
9d001ef8:	1440fffd 	bnez	v0,9d001ef0 <LCD_Write+0x4c>
9d001efc:	00000000 	nop
  if(rs) { // 1 for data
9d001f00:	1220000f 	beqz	s1,9d001f40 <LCD_Write+0x9c>
9d001f04:	3c02bf80 	lui	v0,0xbf80
    PMADDRSET = 1 << PMABIT;
9d001f08:	3c02bf80 	lui	v0,0xbf80
9d001f0c:	24030400 	li	v1,1024
9d001f10:	ac437028 	sw	v1,28712(v0)
  while(PMMODEbits.BUSY) { ; }
9d001f14:	3c03bf80 	lui	v1,0xbf80
9d001f18:	8c627010 	lw	v0,28688(v1)
9d001f1c:	7c4203c0 	ext	v0,v0,0xf,0x1
9d001f20:	1440fffd 	bnez	v0,9d001f18 <LCD_Write+0x74>
9d001f24:	3c02bf80 	lui	v0,0xbf80
  PMDIN = data;        // send the data
9d001f28:	ac507040 	sw	s0,28736(v0)
}
9d001f2c:	8fbf0024 	lw	ra,36(sp)
9d001f30:	8fb10020 	lw	s1,32(sp)
9d001f34:	8fb0001c 	lw	s0,28(sp)
9d001f38:	03e00008 	jr	ra
9d001f3c:	27bd0028 	addiu	sp,sp,40
    PMADDRCLR = 1 << PMABIT; 
9d001f40:	24030400 	li	v1,1024
9d001f44:	ac437024 	sw	v1,28708(v0)
  while(PMMODEbits.BUSY) { ; }
9d001f48:	1000fff3 	b	9d001f18 <LCD_Write+0x74>
9d001f4c:	3c03bf80 	lui	v1,0xbf80

9d001f50 <LCD_Clear>:
void LCD_Clear(void) {
9d001f50:	27bdffe8 	addiu	sp,sp,-24
9d001f54:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x01); //clear the whole screen
9d001f58:	24050001 	li	a1,1
9d001f5c:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d001f60:	00002025 	move	a0,zero
}
9d001f64:	8fbf0014 	lw	ra,20(sp)
9d001f68:	03e00008 	jr	ra
9d001f6c:	27bd0018 	addiu	sp,sp,24

9d001f70 <LCD_Home>:
void LCD_Home(void) {
9d001f70:	27bdffe8 	addiu	sp,sp,-24
9d001f74:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x02);
9d001f78:	24050002 	li	a1,2
9d001f7c:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d001f80:	00002025 	move	a0,zero
}
9d001f84:	8fbf0014 	lw	ra,20(sp)
9d001f88:	03e00008 	jr	ra
9d001f8c:	27bd0018 	addiu	sp,sp,24

9d001f90 <LCD_Entry>:
void LCD_Entry(int id, int s) {
9d001f90:	27bdffe8 	addiu	sp,sp,-24
9d001f94:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x04 | (id << 1) | s);
9d001f98:	00042040 	sll	a0,a0,0x1
9d001f9c:	00852825 	or	a1,a0,a1
9d001fa0:	34a50004 	ori	a1,a1,0x4
9d001fa4:	30a500ff 	andi	a1,a1,0xff
9d001fa8:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d001fac:	00002025 	move	a0,zero
}
9d001fb0:	8fbf0014 	lw	ra,20(sp)
9d001fb4:	03e00008 	jr	ra
9d001fb8:	27bd0018 	addiu	sp,sp,24

9d001fbc <LCD_Display>:
void LCD_Display(int d, int c, int b) {
9d001fbc:	27bdffe8 	addiu	sp,sp,-24
9d001fc0:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d001fc4:	00042080 	sll	a0,a0,0x2
9d001fc8:	00862025 	or	a0,a0,a2
9d001fcc:	00052840 	sll	a1,a1,0x1
9d001fd0:	00852025 	or	a0,a0,a1
9d001fd4:	34850008 	ori	a1,a0,0x8
9d001fd8:	30a500ff 	andi	a1,a1,0xff
9d001fdc:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d001fe0:	00002025 	move	a0,zero
}
9d001fe4:	8fbf0014 	lw	ra,20(sp)
9d001fe8:	03e00008 	jr	ra
9d001fec:	27bd0018 	addiu	sp,sp,24

9d001ff0 <LCD_Shift>:
void LCD_Shift(int sc, int rl) {
9d001ff0:	27bdffe8 	addiu	sp,sp,-24
9d001ff4:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x1 | (sc << 3) | (rl << 2));
9d001ff8:	000420c0 	sll	a0,a0,0x3
9d001ffc:	00052880 	sll	a1,a1,0x2
9d002000:	00852825 	or	a1,a0,a1
9d002004:	34a50001 	ori	a1,a1,0x1
9d002008:	30a500fd 	andi	a1,a1,0xfd
9d00200c:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d002010:	00002025 	move	a0,zero
}
9d002014:	8fbf0014 	lw	ra,20(sp)
9d002018:	03e00008 	jr	ra
9d00201c:	27bd0018 	addiu	sp,sp,24

9d002020 <LCD_Function>:
void LCD_Function(int n, int f) {
9d002020:	27bdffe8 	addiu	sp,sp,-24
9d002024:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d002028:	000420c0 	sll	a0,a0,0x3
9d00202c:	00052880 	sll	a1,a1,0x2
9d002030:	00852825 	or	a1,a0,a1
9d002034:	34a50030 	ori	a1,a1,0x30
9d002038:	30a500fc 	andi	a1,a1,0xfc
9d00203c:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d002040:	00002025 	move	a0,zero
}
9d002044:	8fbf0014 	lw	ra,20(sp)
9d002048:	03e00008 	jr	ra
9d00204c:	27bd0018 	addiu	sp,sp,24

9d002050 <LCD_Move>:
void LCD_Move(int line, int col) {
9d002050:	27bdffe8 	addiu	sp,sp,-24
9d002054:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x80 | (line << 6) | col);
9d002058:	00042180 	sll	a0,a0,0x6
9d00205c:	00852825 	or	a1,a0,a1
9d002060:	30a500ff 	andi	a1,a1,0xff
9d002064:	34a50080 	ori	a1,a1,0x80
9d002068:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d00206c:	00002025 	move	a0,zero
}
9d002070:	8fbf0014 	lw	ra,20(sp)
9d002074:	03e00008 	jr	ra
9d002078:	27bd0018 	addiu	sp,sp,24

9d00207c <LCD_CMove>:
void LCD_CMove(unsigned char addr) {
9d00207c:	27bdffe8 	addiu	sp,sp,-24
9d002080:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x40 | addr);
9d002084:	34850040 	ori	a1,a0,0x40
9d002088:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d00208c:	00002025 	move	a0,zero
}
9d002090:	8fbf0014 	lw	ra,20(sp)
9d002094:	03e00008 	jr	ra
9d002098:	27bd0018 	addiu	sp,sp,24

9d00209c <LCD_WriteChar>:
void LCD_WriteChar(char c) {         
9d00209c:	27bdffe8 	addiu	sp,sp,-24
9d0020a0:	afbf0014 	sw	ra,20(sp)
  LCD_Write(1, c); 
9d0020a4:	308500ff 	andi	a1,a0,0xff
9d0020a8:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d0020ac:	24040001 	li	a0,1
}
9d0020b0:	8fbf0014 	lw	ra,20(sp)
9d0020b4:	03e00008 	jr	ra
9d0020b8:	27bd0018 	addiu	sp,sp,24

9d0020bc <LCD_WriteString>:
void LCD_WriteString(const char *str) {
9d0020bc:	27bdffe8 	addiu	sp,sp,-24
9d0020c0:	afbf0014 	sw	ra,20(sp)
9d0020c4:	afb00010 	sw	s0,16(sp)
9d0020c8:	00808025 	move	s0,a0
  while(*str) {
9d0020cc:	80840000 	lb	a0,0(a0)
9d0020d0:	10800006 	beqz	a0,9d0020ec <LCD_WriteString+0x30>
9d0020d4:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
9d0020d8:	0f400827 	jal	9d00209c <LCD_WriteChar>
9d0020dc:	26100001 	addiu	s0,s0,1
  while(*str) {
9d0020e0:	82040000 	lb	a0,0(s0)
9d0020e4:	1480fffc 	bnez	a0,9d0020d8 <LCD_WriteString+0x1c>
9d0020e8:	8fbf0014 	lw	ra,20(sp)
}
9d0020ec:	8fb00010 	lw	s0,16(sp)
9d0020f0:	03e00008 	jr	ra
9d0020f4:	27bd0018 	addiu	sp,sp,24

9d0020f8 <LCD_CustomChar>:
void LCD_CustomChar(unsigned char val, const char * data) {
9d0020f8:	27bdffd8 	addiu	sp,sp,-40
9d0020fc:	afbf0024 	sw	ra,36(sp)
9d002100:	afb30020 	sw	s3,32(sp)
9d002104:	afb2001c 	sw	s2,28(sp)
9d002108:	afb10018 	sw	s1,24(sp)
9d00210c:	afb00014 	sw	s0,20(sp)
9d002110:	00a09825 	move	s3,a1
    LCD_CMove(((val & 7) << 2) | i);
9d002114:	00042080 	sll	a0,a0,0x2
9d002118:	3091001c 	andi	s1,a0,0x1c
  for(i = 0; i < 7; ++i) {
9d00211c:	00008025 	move	s0,zero
9d002120:	24120007 	li	s2,7
    LCD_CMove(((val & 7) << 2) | i);
9d002124:	02302025 	or	a0,s1,s0
9d002128:	0f40081f 	jal	9d00207c <LCD_CMove>
9d00212c:	308400ff 	andi	a0,a0,0xff
    LCD_Write(1, data[i]);
9d002130:	02701021 	addu	v0,s3,s0
9d002134:	90450000 	lbu	a1,0(v0)
9d002138:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d00213c:	24040001 	li	a0,1
  for(i = 0; i < 7; ++i) {
9d002140:	26100001 	addiu	s0,s0,1
9d002144:	5612fff8 	bnel	s0,s2,9d002128 <LCD_CustomChar+0x30>
9d002148:	02302025 	or	a0,s1,s0
}
9d00214c:	8fbf0024 	lw	ra,36(sp)
9d002150:	8fb30020 	lw	s3,32(sp)
9d002154:	8fb2001c 	lw	s2,28(sp)
9d002158:	8fb10018 	lw	s1,24(sp)
9d00215c:	8fb00014 	lw	s0,20(sp)
9d002160:	03e00008 	jr	ra
9d002164:	27bd0028 	addiu	sp,sp,40

9d002168 <LCD_Setup>:
void LCD_Setup() {
9d002168:	27bdffe8 	addiu	sp,sp,-24
9d00216c:	afbf0014 	sw	ra,20(sp)
9d002170:	afb00010 	sw	s0,16(sp)
  int en = __builtin_disable_interrupts();  // disable interrupts, remember initial state
9d002174:	41706000 	di	s0
9d002178:	000000c0 	ehb
  IEC1bits.PMPIE = 0;    // disable PMP interrupts
9d00217c:	3c02bf88 	lui	v0,0xbf88
9d002180:	8c431070 	lw	v1,4208(v0)
9d002184:	7c031084 	ins	v1,zero,0x2,0x1
9d002188:	ac431070 	sw	v1,4208(v0)
  PMCON = 0;             // clear PMCON, like it is on reset
9d00218c:	3c02bf80 	lui	v0,0xbf80
9d002190:	ac407000 	sw	zero,28672(v0)
  PMCONbits.PTWREN = 1;  // PMENB strobe enabled
9d002194:	3c02bf80 	lui	v0,0xbf80
9d002198:	94437000 	lhu	v1,28672(v0)
9d00219c:	24040001 	li	a0,1
9d0021a0:	7c834a44 	ins	v1,a0,0x9,0x1
9d0021a4:	a4437000 	sh	v1,28672(v0)
  PMCONbits.PTRDEN = 1;  // PMRD/PMWR enabled
9d0021a8:	94437000 	lhu	v1,28672(v0)
9d0021ac:	7c834204 	ins	v1,a0,0x8,0x1
9d0021b0:	a4437000 	sh	v1,28672(v0)
  PMCONbits.WRSP = 1;    // Read/write strobe is active high
9d0021b4:	94437000 	lhu	v1,28672(v0)
9d0021b8:	7c830844 	ins	v1,a0,0x1,0x1
9d0021bc:	a4437000 	sh	v1,28672(v0)
  PMCONbits.RDSP = 1;    // Read/write strobe is active high
9d0021c0:	94437000 	lhu	v1,28672(v0)
9d0021c4:	7c830004 	ins	v1,a0,0x0,0x1
9d0021c8:	a4437000 	sh	v1,28672(v0)
  PMMODE = 0;            // clear PMMODE like it is on reset
9d0021cc:	3c03bf80 	lui	v1,0xbf80
9d0021d0:	ac607010 	sw	zero,28688(v1)
  PMMODEbits.MODE = 0x3; // set master mode 1, which uses a single strobe
9d0021d4:	3c03bf80 	lui	v1,0xbf80
9d0021d8:	94657010 	lhu	a1,28688(v1)
9d0021dc:	24060003 	li	a2,3
9d0021e0:	7cc54a04 	ins	a1,a2,0x8,0x2
9d0021e4:	a4657010 	sh	a1,28688(v1)
  PMMODEbits.WAITB = 0x3;  // Tas in the LCD datasheet is 60 ns 
9d0021e8:	94657010 	lhu	a1,28688(v1)
9d0021ec:	7cc53984 	ins	a1,a2,0x6,0x2
9d0021f0:	a4657010 	sh	a1,28688(v1)
  PMMODEbits.WAITM = 0xF;  // PWeh in the data sheet is 230 ns (we don't quite meet this)
9d0021f4:	94657010 	lhu	a1,28688(v1)
9d0021f8:	2406000f 	li	a2,15
9d0021fc:	7cc52884 	ins	a1,a2,0x2,0x4
9d002200:	a4657010 	sh	a1,28688(v1)
  PMMODEbits.WAITE = 0x1;  // after E is low wait Tah (10ns)
9d002204:	94657010 	lhu	a1,28688(v1)
9d002208:	7c850804 	ins	a1,a0,0x0,0x2
9d00220c:	a4657010 	sh	a1,28688(v1)
  PMAEN |= 1 << PMABIT;   // PMA is an address line
9d002210:	3c05bf80 	lui	a1,0xbf80
9d002214:	8ca37050 	lw	v1,28752(a1)
9d002218:	34630400 	ori	v1,v1,0x400
9d00221c:	aca37050 	sw	v1,28752(a1)
  PMCONbits.ON = 1;        // enable the PMP peripheral
9d002220:	94437000 	lhu	v1,28672(v0)
9d002224:	7c837bc4 	ins	v1,a0,0xf,0x1
9d002228:	a4437000 	sh	v1,28672(v0)
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d00222c:	24050038 	li	a1,56
9d002230:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d002234:	00002025 	move	a0,zero
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d002238:	2405000c 	li	a1,12
9d00223c:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d002240:	00002025 	move	a0,zero
  LCD_Clear();             // clear the LCD 
9d002244:	0f4007d4 	jal	9d001f50 <LCD_Clear>
9d002248:	32100001 	andi	s0,s0,0x1
  LCD_Write(0, 0x04 | (id << 1) | s);
9d00224c:	24050006 	li	a1,6
9d002250:	0f4007a9 	jal	9d001ea4 <LCD_Write>
9d002254:	00002025 	move	a0,zero
  if(en & 0x1)             // if interrupts were enabled before, re-enable them
9d002258:	12000003 	beqz	s0,9d002268 <LCD_Setup+0x100>
9d00225c:	8fbf0014 	lw	ra,20(sp)
    __builtin_enable_interrupts();
9d002260:	41626020 	ei	v0
}
9d002264:	8fbf0014 	lw	ra,20(sp)
9d002268:	8fb00010 	lw	s0,16(sp)
9d00226c:	03e00008 	jr	ra
9d002270:	27bd0018 	addiu	sp,sp,24

9d002274 <NU32_Startup>:

// Perform startup routines:
//  Make NU32_LED1 and NU32_LED2 pins outputs (NU32_USER is by default an input)
//  Initialize the serial port - UART3 (no interrupt) 
//  Enable interrupts
void NU32_Startup() {
9d002274:	27bdfff8 	addiu	sp,sp,-8
9d002278:	afbf0004 	sw	ra,4(sp)
  // disable interrupts
  __builtin_disable_interrupts();
9d00227c:	41626000 	di	v0
9d002280:	000000c0 	ehb
  // see Chapter 2 "CPU for Devices with M4K Core" of the PIC32 reference manual
  // most of the other bits have prescribed values
  // microchip does not provide a _CP0_SET_CONFIG macro, so we directly use
  // the compiler built-in command _mtc0
  // to disable cache, use 0xa4210582 
  __builtin_mtc0(_CP0_CONFIG, _CP0_CONFIG_SELECT, 0xa4210583); 
9d002284:	3c02a421 	lui	v0,0xa421
9d002288:	24420583 	addiu	v0,v0,1411
9d00228c:	40828000 	mtc0	v0,c0_config
9d002290:	000000c0 	ehb
  
  // set the prefectch cache wait state to 2, as per the
  // electrical characteristics data sheet
  CHECONbits.PFMWS = 0x2;   
9d002294:	3c02bf88 	lui	v0,0xbf88
9d002298:	8c434000 	lw	v1,16384(v0)
9d00229c:	24050002 	li	a1,2
9d0022a0:	7ca31004 	ins	v1,a1,0x0,0x3
9d0022a4:	ac434000 	sw	v1,16384(v0)

  //enable prefetch for cacheable and noncacheable memory
  CHECONbits.PREFEN = 0x3; 
9d0022a8:	8c434000 	lw	v1,16384(v0)
9d0022ac:	24040003 	li	a0,3
9d0022b0:	7c832904 	ins	v1,a0,0x4,0x2
9d0022b4:	ac434000 	sw	v1,16384(v0)

  // 0 data RAM access wait states
  BMXCONbits.BMXWSDRM = 0x0;
9d0022b8:	3c02bf88 	lui	v0,0xbf88
9d0022bc:	8c432000 	lw	v1,8192(v0)
9d0022c0:	7c033184 	ins	v1,zero,0x6,0x1
9d0022c4:	ac432000 	sw	v1,8192(v0)
  
  // enable multi vector interrupts
  INTCONbits.MVEC = 0x1;
9d0022c8:	3c02bf88 	lui	v0,0xbf88
9d0022cc:	8c461000 	lw	a2,4096(v0)
9d0022d0:	24030001 	li	v1,1
9d0022d4:	7c666304 	ins	a2,v1,0xc,0x1
9d0022d8:	ac461000 	sw	a2,4096(v0)

  // disable JTAG to get B10, B11, B12 and B13 back
  DDPCONbits.JTAGEN = 0;
9d0022dc:	3c02bf81 	lui	v0,0xbf81
9d0022e0:	9046f200 	lbu	a2,-3584(v0)
9d0022e4:	7c0618c4 	ins	a2,zero,0x3,0x1
9d0022e8:	a046f200 	sb	a2,-3584(v0)

  TRISFCLR = 0x0003;  // Make F0 and F1 outputs (LED1 and LED2)
9d0022ec:	3c02bf88 	lui	v0,0xbf88
9d0022f0:	ac446144 	sw	a0,24900(v0)
  NU32_LED1 = 1;      // LED1 is off
9d0022f4:	3c02bf88 	lui	v0,0xbf88
9d0022f8:	90446160 	lbu	a0,24928(v0)
9d0022fc:	7c640004 	ins	a0,v1,0x0,0x1
9d002300:	a0446160 	sb	a0,24928(v0)
  NU32_LED2 = 0;      // LED2 is on
9d002304:	90446160 	lbu	a0,24928(v0)
9d002308:	7c040844 	ins	a0,zero,0x1,0x1
9d00230c:	a0446160 	sb	a0,24928(v0)

  // turn on UART3 without an interrupt
  U3MODEbits.BRGH = 0; // set baud to NU32_DESIRED_BAUD
9d002310:	3c02bf80 	lui	v0,0xbf80
9d002314:	94446400 	lhu	a0,25600(v0)
9d002318:	7c0418c4 	ins	a0,zero,0x3,0x1
9d00231c:	a4446400 	sh	a0,25600(v0)
  U3BRG = ((NU32_SYS_FREQ / NU32_DESIRED_BAUD) / 16) - 1;
9d002320:	3c04bf80 	lui	a0,0xbf80
9d002324:	24060014 	li	a2,20
9d002328:	ac866440 	sw	a2,25664(a0)

  // 8 bit, no parity bit, and 1 stop bit (8N1 setup)
  U3MODEbits.PDSEL = 0;
9d00232c:	94446400 	lhu	a0,25600(v0)
9d002330:	7c041044 	ins	a0,zero,0x1,0x2
9d002334:	a4446400 	sh	a0,25600(v0)
  U3MODEbits.STSEL = 0;
9d002338:	94446400 	lhu	a0,25600(v0)
9d00233c:	7c040004 	ins	a0,zero,0x0,0x1
9d002340:	a4446400 	sh	a0,25600(v0)

  // configure TX & RX pins as output & input pins
  U3STAbits.UTXEN = 1;
9d002344:	3c04bf80 	lui	a0,0xbf80
9d002348:	8c866410 	lw	a2,25616(a0)
9d00234c:	7c665284 	ins	a2,v1,0xa,0x1
9d002350:	ac866410 	sw	a2,25616(a0)
  U3STAbits.URXEN = 1;
9d002354:	8c866410 	lw	a2,25616(a0)
9d002358:	7c666304 	ins	a2,v1,0xc,0x1
9d00235c:	ac866410 	sw	a2,25616(a0)
  // configure hardware flow control using RTS and CTS
  U3MODEbits.UEN = 2;
9d002360:	94446400 	lhu	a0,25600(v0)
9d002364:	7ca44a04 	ins	a0,a1,0x8,0x2
9d002368:	a4446400 	sh	a0,25600(v0)

  // enable the uart
  U3MODEbits.ON = 1;
9d00236c:	94446400 	lhu	a0,25600(v0)
9d002370:	7c647bc4 	ins	a0,v1,0xf,0x1
9d002374:	a4446400 	sh	a0,25600(v0)

  __builtin_enable_interrupts();
9d002378:	41626020 	ei	v0
}
9d00237c:	8fbf0004 	lw	ra,4(sp)
9d002380:	03e00008 	jr	ra
9d002384:	27bd0008 	addiu	sp,sp,8

9d002388 <NU32_ReadUART3>:
// Read from UART3
// block other functions until you get a '\r' or '\n'
// send the pointer to your char array and the number of elements in the array
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
9d002388:	00003025 	move	a2,zero
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d00238c:	3c03bf80 	lui	v1,0xbf80
      data = U3RXREG;      // read the data
9d002390:	3c09bf80 	lui	t1,0xbf80
      if ((data == '\n') || (data == '\r')) {
9d002394:	2408000a 	li	t0,10
9d002398:	240a000d 	li	t2,13
    if (U3STAbits.URXDA) { // if data is available
9d00239c:	8c626410 	lw	v0,25616(v1)
9d0023a0:	30420001 	andi	v0,v0,0x1
9d0023a4:	1040fffd 	beqz	v0,9d00239c <NU32_ReadUART3+0x14>
9d0023a8:	00000000 	nop
      data = U3RXREG;      // read the data
9d0023ac:	8d226430 	lw	v0,25648(t1)
9d0023b0:	7c021420 	seb	v0,v0
      if ((data == '\n') || (data == '\r')) {
9d0023b4:	50480009 	beql	v0,t0,9d0023dc <NU32_ReadUART3+0x54>
9d0023b8:	00862021 	addu	a0,a0,a2
9d0023bc:	104a0006 	beq	v0,t2,9d0023d8 <NU32_ReadUART3+0x50>
9d0023c0:	00863821 	addu	a3,a0,a2
        complete = 1;
      } else {
        message[num_bytes] = data;
9d0023c4:	a0e20000 	sb	v0,0(a3)
        ++num_bytes;
9d0023c8:	24c60001 	addiu	a2,a2,1
        // roll over if the array is too small
        if (num_bytes >= maxLength) {
9d0023cc:	00c5102a 	slt	v0,a2,a1
9d0023d0:	1000fff2 	b	9d00239c <NU32_ReadUART3+0x14>
9d0023d4:	0002300a 	movz	a2,zero,v0
        }
      }
    }
  }
  // end the string
  message[num_bytes] = '\0';
9d0023d8:	00862021 	addu	a0,a0,a2
}
9d0023dc:	03e00008 	jr	ra
9d0023e0:	a0800000 	sb	zero,0(a0)

9d0023e4 <NU32_WriteUART3>:

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d0023e4:	80850000 	lb	a1,0(a0)
9d0023e8:	10a0000b 	beqz	a1,9d002418 <NU32_WriteUART3+0x34>
9d0023ec:	3c03bf80 	lui	v1,0xbf80
    while (U3STAbits.UTXBF) {
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d0023f0:	3c06bf80 	lui	a2,0xbf80
    while (U3STAbits.UTXBF) {
9d0023f4:	8c626410 	lw	v0,25616(v1)
9d0023f8:	7c420240 	ext	v0,v0,0x9,0x1
9d0023fc:	1440fffd 	bnez	v0,9d0023f4 <NU32_WriteUART3+0x10>
9d002400:	00000000 	nop
    U3TXREG = *string;
9d002404:	acc56420 	sw	a1,25632(a2)
    ++string;
9d002408:	24840001 	addiu	a0,a0,1
  while (*string != '\0') {
9d00240c:	80850000 	lb	a1,0(a0)
9d002410:	14a0fff8 	bnez	a1,9d0023f4 <NU32_WriteUART3+0x10>
9d002414:	00000000 	nop
  }
}
9d002418:	03e00008 	jr	ra
9d00241c:	00000000 	nop

Disassembly of section .text.general_exception:

9d002420 <_general_exception_context>:
9d002420:	27bdffa8 	addiu	sp,sp,-88
9d002424:	afa10004 	sw	at,4(sp)
9d002428:	afa20008 	sw	v0,8(sp)
9d00242c:	afa3000c 	sw	v1,12(sp)
9d002430:	afa40010 	sw	a0,16(sp)
9d002434:	afa50014 	sw	a1,20(sp)
9d002438:	afa60018 	sw	a2,24(sp)
9d00243c:	afa7001c 	sw	a3,28(sp)
9d002440:	afa80020 	sw	t0,32(sp)
9d002444:	afa90024 	sw	t1,36(sp)
9d002448:	afaa0028 	sw	t2,40(sp)
9d00244c:	afab002c 	sw	t3,44(sp)
9d002450:	afac0030 	sw	t4,48(sp)
9d002454:	afad0034 	sw	t5,52(sp)
9d002458:	afae0038 	sw	t6,56(sp)
9d00245c:	afaf003c 	sw	t7,60(sp)
9d002460:	afb80040 	sw	t8,64(sp)
9d002464:	afb90044 	sw	t9,68(sp)
9d002468:	afbf0048 	sw	ra,72(sp)
9d00246c:	00004012 	mflo	t0
9d002470:	afa8004c 	sw	t0,76(sp)
9d002474:	00004010 	mfhi	t0
9d002478:	afa80050 	sw	t0,80(sp)
9d00247c:	3c1a9d00 	lui	k0,0x9d00
9d002480:	275a26b4 	addiu	k0,k0,9908
9d002484:	00000000 	nop
9d002488:	40046800 	mfc0	a0,c0_cause
9d00248c:	40056000 	mfc0	a1,c0_status
9d002490:	0340f809 	jalr	k0
9d002494:	00000000 	nop
9d002498:	8fa80050 	lw	t0,80(sp)
9d00249c:	01000011 	mthi	t0
9d0024a0:	8fa8004c 	lw	t0,76(sp)
9d0024a4:	01000013 	mtlo	t0
9d0024a8:	8fa10004 	lw	at,4(sp)
9d0024ac:	8fa20008 	lw	v0,8(sp)
9d0024b0:	8fa3000c 	lw	v1,12(sp)
9d0024b4:	8fa40010 	lw	a0,16(sp)
9d0024b8:	8fa50014 	lw	a1,20(sp)
9d0024bc:	8fa60018 	lw	a2,24(sp)
9d0024c0:	8fa7001c 	lw	a3,28(sp)
9d0024c4:	8fa80020 	lw	t0,32(sp)
9d0024c8:	8fa90024 	lw	t1,36(sp)
9d0024cc:	8faa0028 	lw	t2,40(sp)
9d0024d0:	8fab002c 	lw	t3,44(sp)
9d0024d4:	8fac0030 	lw	t4,48(sp)
9d0024d8:	8fad0034 	lw	t5,52(sp)
9d0024dc:	8fae0038 	lw	t6,56(sp)
9d0024e0:	8faf003c 	lw	t7,60(sp)
9d0024e4:	8fb80040 	lw	t8,64(sp)
9d0024e8:	8fb90044 	lw	t9,68(sp)
9d0024ec:	8fbf0048 	lw	ra,72(sp)
9d0024f0:	27bd0058 	addiu	sp,sp,88
9d0024f4:	000000c0 	ehb
9d0024f8:	42000018 	eret

Disassembly of section .text:

9d0024fc <main>:
#include "NU32.h"
#include "LCD.h"

int main() {
9d0024fc:	27bdffd0 	addiu	sp,sp,-48
9d002500:	afbf002c 	sw	ra,44(sp)
9d002504:	afb20028 	sw	s2,40(sp)
9d002508:	afb10024 	sw	s1,36(sp)

    char msg[16];

    // initialize necessary things
    NU32_Startup();
9d00250c:	0f40089d 	jal	9d002274 <NU32_Startup>
9d002510:	afb00020 	sw	s0,32(sp)
    LCD_Setup();
9d002514:	0f40085a 	jal	9d002168 <LCD_Setup>
9d002518:	3c129d00 	lui	s2,0x9d00

    while(1){
        // takes user input first
        NU32_WriteUART3("Input message now: \r\n");
9d00251c:	26521e00 	addiu	s2,s2,7680
        NU32_ReadUART3(msg, 16);

        // prints as long as USER not pressed
        while(NU32_USER){
9d002520:	3c10bf88 	lui	s0,0xbf88
            LCD_WriteString(msg);
        }

        // clears when its done
        LCD_Clear();
        NU32_WriteUART3("Cleared Output.\r\n\r\r");
9d002524:	3c119d00 	lui	s1,0x9d00
9d002528:	1000000d 	b	9d002560 <main+0x64>
9d00252c:	26311e18 	addiu	s1,s1,7704
            LCD_Move(0,0);
9d002530:	0f400814 	jal	9d002050 <LCD_Move>
9d002534:	00002025 	move	a0,zero
            LCD_WriteString(msg);
9d002538:	0f40082f 	jal	9d0020bc <LCD_WriteString>
9d00253c:	27a40010 	addiu	a0,sp,16
        while(NU32_USER){
9d002540:	8e0260d0 	lw	v0,24784(s0)
9d002544:	7c4201c0 	ext	v0,v0,0x7,0x1
9d002548:	1440fff9 	bnez	v0,9d002530 <main+0x34>
9d00254c:	00002825 	move	a1,zero
        LCD_Clear();
9d002550:	0f4007d4 	jal	9d001f50 <LCD_Clear>
9d002554:	00000000 	nop
        NU32_WriteUART3("Cleared Output.\r\n\r\r");
9d002558:	0f4008f9 	jal	9d0023e4 <NU32_WriteUART3>
9d00255c:	02202025 	move	a0,s1
        NU32_WriteUART3("Input message now: \r\n");
9d002560:	0f4008f9 	jal	9d0023e4 <NU32_WriteUART3>
9d002564:	02402025 	move	a0,s2
        NU32_ReadUART3(msg, 16);
9d002568:	24050010 	li	a1,16
9d00256c:	0f4008e2 	jal	9d002388 <NU32_ReadUART3>
9d002570:	27a40010 	addiu	a0,sp,16
        while(NU32_USER){
9d002574:	8e0260d0 	lw	v0,24784(s0)
9d002578:	7c4201c0 	ext	v0,v0,0x7,0x1
9d00257c:	1040fff4 	beqz	v0,9d002550 <main+0x54>
9d002580:	00002825 	move	a1,zero
9d002584:	1000ffea 	b	9d002530 <main+0x34>
9d002588:	00000000 	nop

9d00258c <__pic32_data_init>:
9d00258c:	03e01825 	move	v1,ra

9d002590 <_dinit_init>:
9d002590:	3c089d00 	lui	t0,0x9d00
9d002594:	250827b8 	addiu	t0,t0,10168
9d002598:	1100001b 	beqz	t0,9d002608 <_dinit_end+0x18>
9d00259c:	00000000 	nop
9d0025a0:	8d090000 	lw	t1,0(t0)
9d0025a4:	11200018 	beqz	t1,9d002608 <_dinit_end+0x18>
9d0025a8:	25080004 	addiu	t0,t0,4
9d0025ac:	8d0a0000 	lw	t2,0(t0)
9d0025b0:	25080004 	addiu	t0,t0,4
9d0025b4:	8d0b0000 	lw	t3,0(t0)
9d0025b8:	11600009 	beqz	t3,9d0025e0 <_dinit_clear>
9d0025bc:	25080004 	addiu	t0,t0,4

9d0025c0 <_dinit_copy>:
9d0025c0:	910c0000 	lbu	t4,0(t0)
9d0025c4:	254affff 	addiu	t2,t2,-1
9d0025c8:	25080001 	addiu	t0,t0,1
9d0025cc:	a12c0000 	sb	t4,0(t1)
9d0025d0:	1540fffb 	bnez	t2,9d0025c0 <_dinit_copy>
9d0025d4:	25290001 	addiu	t1,t1,1
9d0025d8:	10000005 	b	9d0025f0 <_dinit_end>
9d0025dc:	00000000 	nop

9d0025e0 <_dinit_clear>:
9d0025e0:	a1200000 	sb	zero,0(t1)
9d0025e4:	254affff 	addiu	t2,t2,-1
9d0025e8:	1540fffd 	bnez	t2,9d0025e0 <_dinit_clear>
9d0025ec:	25290001 	addiu	t1,t1,1

9d0025f0 <_dinit_end>:
9d0025f0:	25080003 	addiu	t0,t0,3
9d0025f4:	240afffc 	li	t2,-4
9d0025f8:	01484024 	and	t0,t2,t0
9d0025fc:	8d090000 	lw	t1,0(t0)
9d002600:	1520ffe7 	bnez	t1,9d0025a0 <_dinit_init+0x10>
9d002604:	00000000 	nop
9d002608:	0060f825 	move	ra,v1
9d00260c:	03e00008 	jr	ra
9d002610:	00000000 	nop
9d002614:	00000000 	nop

Disassembly of section .text.main_entry:

9d002618 <_main_entry>:
9d002618:	3c040000 	lui	a0,0x0
9d00261c:	27bdffe8 	addiu	sp,sp,-24
9d002620:	24840000 	addiu	a0,a0,0
9d002624:	10800003 	beqz	a0,9d002634 <_main_entry+0x1c>
9d002628:	afbf0014 	sw	ra,20(sp)
9d00262c:	0080f809 	jalr	a0
9d002630:	00000000 	nop
9d002634:	30840000 	andi	a0,a0,0x0
9d002638:	30a50000 	andi	a1,a1,0x0
9d00263c:	3c089d00 	lui	t0,0x9d00
9d002640:	250824fc 	addiu	t0,t0,9468
9d002644:	0100f809 	jalr	t0
9d002648:	00000000 	nop

9d00264c <__crt0_exit>:
9d00264c:	3c020000 24420000 10400003 00000000     ...<..B$..@.....
9d00265c:	0040f809 00000000 1000fff9 00000000     ..@.............

Disassembly of section .text._bootstrap_exception_handler:

9d00266c <_bootstrap_exception_handler>:
9d00266c:	3c020000 	lui	v0,0x0
9d002670:	24420000 	addiu	v0,v0,0
9d002674:	10400005 	beqz	v0,9d00268c <_bootstrap_exception_handler+0x20>
9d002678:	3c020000 	lui	v0,0x0
9d00267c:	24420000 	addiu	v0,v0,0
9d002680:	10400003 	beqz	v0,9d002690 <_bootstrap_exception_handler+0x24>
9d002684:	3c029d00 	lui	v0,0x9d00
9d002688:	7000003f 	sdbbp
9d00268c:	3c029d00 	lui	v0,0x9d00
9d002690:	24422744 	addiu	v0,v0,10052
9d002694:	10400005 	beqz	v0,9d0026ac <_bootstrap_exception_handler+0x40>
9d002698:	00000000 	nop
9d00269c:	27bdffe8 	addiu	sp,sp,-24
9d0026a0:	afbf0014 	sw	ra,20(sp)
9d0026a4:	0040f809 	jalr	v0
9d0026a8:	00000000 	nop
9d0026ac:	1000ffff 	b	9d0026ac <_bootstrap_exception_handler+0x40>
9d0026b0:	00000000 	nop

Disassembly of section .text._general_exception_handler:

9d0026b4 <_general_exception_handler>:
9d0026b4:	3c020000 	lui	v0,0x0
9d0026b8:	24420000 	addiu	v0,v0,0
9d0026bc:	10400005 	beqz	v0,9d0026d4 <_general_exception_handler+0x20>
9d0026c0:	3c020000 	lui	v0,0x0
9d0026c4:	24420000 	addiu	v0,v0,0
9d0026c8:	10400003 	beqz	v0,9d0026d8 <_general_exception_handler+0x24>
9d0026cc:	3c029d00 	lui	v0,0x9d00
9d0026d0:	7000003f 	sdbbp
9d0026d4:	3c029d00 	lui	v0,0x9d00
9d0026d8:	24422744 	addiu	v0,v0,10052
9d0026dc:	10400005 	beqz	v0,9d0026f4 <_general_exception_handler+0x40>
9d0026e0:	00000000 	nop
9d0026e4:	27bdffe8 	addiu	sp,sp,-24
9d0026e8:	afbf0014 	sw	ra,20(sp)
9d0026ec:	0040f809 	jalr	v0
9d0026f0:	00000000 	nop
9d0026f4:	1000ffff 	b	9d0026f4 <_general_exception_handler+0x40>
9d0026f8:	00000000 	nop

Disassembly of section .vector_default:

9d0026fc <_DefaultInterrupt>:
9d0026fc:	3c020000 	lui	v0,0x0
9d002700:	24420000 	addiu	v0,v0,0
9d002704:	10400007 	beqz	v0,9d002724 <_DefaultInterrupt+0x28>
9d002708:	3c020000 	lui	v0,0x0
9d00270c:	24420000 	addiu	v0,v0,0
9d002710:	50400005 	beqzl	v0,9d002728 <_DefaultInterrupt+0x2c>
9d002714:	3c029d00 	lui	v0,0x9d00
9d002718:	7000003f 	sdbbp
9d00271c:	03e00008 	jr	ra
9d002720:	00000000 	nop
9d002724:	3c029d00 	lui	v0,0x9d00
9d002728:	24422744 	addiu	v0,v0,10052
9d00272c:	10400003 	beqz	v0,9d00273c <_DefaultInterrupt+0x40>
9d002730:	00000000 	nop
9d002734:	0040f809 	jalr	v0
9d002738:	00000000 	nop
9d00273c:	03e00008 	jr	ra
9d002740:	00000000 	nop

Disassembly of section .text:

9d002744 <__pic32_software_reset>:
9d002744:	41606000 	di
9d002748:	000000c0 	ehb
9d00274c:	3c03aa99 	lui	v1,0xaa99
9d002750:	3c02bf81 	lui	v0,0xbf81
9d002754:	24636655 	addiu	v1,v1,26197
9d002758:	ac40f230 	sw	zero,-3536(v0)
9d00275c:	ac43f230 	sw	v1,-3536(v0)
9d002760:	3c035566 	lui	v1,0x5566
9d002764:	346399aa 	ori	v1,v1,0x99aa
9d002768:	ac43f230 	sw	v1,-3536(v0)
9d00276c:	3c02bf81 	lui	v0,0xbf81
9d002770:	24030001 	li	v1,1
9d002774:	ac43f618 	sw	v1,-2536(v0)
9d002778:	3c02bf81 	lui	v0,0xbf81
9d00277c:	8c42f610 	lw	v0,-2544(v0)
9d002780:	0b4009d3 	j	9d00274c <__pic32_software_reset+0x8>
9d002784:	00000000 	nop

Disassembly of section .text:

9d0027a0 <_nmi_handler>:
9d0027a0:	401a6000 	mfc0	k0,c0_status
9d0027a4:	3c1bffbf 	lui	k1,0xffbf
9d0027a8:	377bffff 	ori	k1,k1,0xffff
9d0027ac:	035bd024 	and	k0,k0,k1
9d0027b0:	409a6000 	mtc0	k0,c0_status
9d0027b4:	42000018 	eret

Disassembly of section .dinit:

9d0027b8 <.dinit>:
9d0027b8:	00000000 	nop
9d0027bc:	22222222 	addi	v0,s1,8738
9d0027c0:	22222222 	addi	v0,s1,8738
9d0027c4:	22222222 	addi	v0,s1,8738

Disassembly of section .text._on_reset:

9d0027c8 <_on_reset>:
9d0027c8:	03e00008 	jr	ra
9d0027cc:	00000000 	nop

Disassembly of section .text._on_bootstrap:

9d0027d0 <_on_bootstrap>:
9d0027d0:	03e00008 	jr	ra
9d0027d4:	00000000 	nop
